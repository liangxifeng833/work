@startuml
title 微信活动入口结构

actor 微信用户 #red
/'-------------定义参与者别名 -------------------'/
participant "wechatIndex\n微信对外接口C" as index #00FF00
微信用户->index: index()
activate index
/'=======================验证参数========================'/
group 验证参数
	alt empty(this.userMsgObj || !is_Object(this.userMsgObj))
		note over index: echo ''; exit;微信服务器不作任何处理，并记录log
	end
end

/'=======================排重微信同一个会话的三次请求 每5秒一次========================'/
group 排重微信同一个会话的三次请求
	participant "WechatCache\n微信缓存处理类L" as cache #FFFFFF
	index->cache:excludeSend(msgId)
	activate cache
	cache-->index:boolean
	deactivate cache
	alt  false === boolean 如果微信同一个会话周期第二次或第三次请求我们
		note over index: echo ''; exit; 程序终止执行
	end
end

/'=======================查询该用户请求信息========================'/
group  查询该用户请求信息
	participant "UserRequest\nRedis用户交互请求类L" as request #FFFFFF
	participant "RedisClient\nRedis操作类L" as redis #FFFFFF
	index->request:getRequests()
		activate request
		request-->index:用户请求信息requestedMsg
		deactivate request
end 

note over index
	requestedMsg在redis中该用户回话信息采用hash数据类型存储
	<font color=red><b>具体数据结构请查看类图中redis数据结构说明
end note

/'=======================用户不同的请求次数分别处理========================'/
group 用户不同的请求次数分别处理
alt empty(requestedMsg) 用户第一次请求 || (当前时间戳 > requestedMsg[sessionEndTime] && 用户输入的不是手机号)
	participant "RequestFirst\n第一次请求处理类L" as first #FFFFFF
	index->first:__construct(this.userMsgObj,requestedMsg)处理第一次请求
	activate first
	first-->index:
	deactivate first
else 1 == requestedMsg[requests]用户第二次请求
	participant "RequestSecond\n第二次请求处理类L" as second #FFFFFF
	index->second:__construct(this.userMsgObj,requestedMsg)处理第二次请求
	activate second
	second-->index:
	deactivate second
end
	
index-->微信用户:
deactivate index
@enduml